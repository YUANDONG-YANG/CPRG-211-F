@page "/editDepartment/{DeptId}"
@inject ManagerDbAccessor managerDbAccessor
@inject NavigationManager NavigationManager
@using EmployeeManager.Models
@using EmployeeManager.Services

<div class="page-container">
    <div class="card form-card">
        <div class="card-header">
            <h3 class="card-title">
                <i class="bi bi-pencil-square me-2"></i>Edit Department
            </h3>
        </div>
        <div class="card-body">
            @if (errorMessage != null)
            {
                <div class="alert alert-danger d-flex align-items-center" role="alert">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    <div>@errorMessage</div>
                </div>
            }

            @if (loading)
            {
                <div class="text-center p-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div class="mt-2">Loading department information...</div>
                </div>
            }
            else if (departmentToEdit == null || departmentToEdit.dept_id == 0)
            {
                <div class="alert alert-warning d-flex align-items-center" role="alert">
                    <i class="bi bi-exclamation-circle-fill me-2"></i>
                    <div>Department not found. The department may have been deleted.</div>
                </div>
                <div class="text-center mt-3">
                    <button class="btn btn-primary" @onclick="GoBack">
                        <i class="bi bi-arrow-left me-1"></i> Back to Departments
                    </button>
                </div>
            }
            else
            {
                <EditForm Model="@departmentToEdit" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger mb-4" />

                    <div class="form-group mb-4">
                        <label for="deptName" class="form-label fw-semibold">Department Name</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-building"></i></span>
                            <InputText id="deptName" class="form-control" @bind-Value="departmentToEdit.dept_name" placeholder="Enter department name" />
                        </div>
                        <small class="form-text text-muted">Department name must be unique</small>
                    </div>

                    <div class="d-flex justify-content-between mt-4">
                        <button type="button" class="btn btn-outline-secondary" @onclick="GoBack">
                            <i class="bi bi-arrow-left me-1"></i> Cancel
                        </button>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-check-circle me-1"></i> Update Department
                        </button>
                    </div>
                </EditForm>
            }
        </div>
    </div>

    @if (departmentToEdit != null && departmentToEdit.dept_id > 0)
    {
        <div class="card info-card mt-4">
            <div class="card-header bg-light">
                <h5 class="mb-0">
                    <i class="bi bi-info-circle me-2"></i>Department Information
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="info-item">
                            <span class="info-label">Department ID:</span>
                            <span class="info-value">@departmentToEdit.dept_id</span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="info-item">
                            <span class="info-label">Last Modified:</span>
                            <span class="info-value">@DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .page-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 1.5rem 1rem;
    }

    .form-card, .info-card {
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border: none;
        margin-bottom: 1rem;
    }

    .card-header {
        background: linear-gradient(to right, #4b79a1, #283e51);
        color: white;
        border-top-left-radius: 8px !important;
        border-top-right-radius: 8px !important;
        padding: 1rem 1.25rem;
    }

    .info-card .card-header {
        background: #f8f9fa;
        color: #495057;
    }

    .card-title {
        margin-bottom: 0;
        font-weight: 600;
    }

    .input-group {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.04);
    }

    .form-control:focus {
        border-color: #4b79a1;
        box-shadow: 0 0 0 0.25rem rgba(75, 121, 161, 0.25);
    }

    .btn-primary {
        background-color: #4b79a1;
        border-color: #4b79a1;
    }

        .btn-primary:hover {
            background-color: #3d6485;
            border-color: #3d6485;
        }

    .info-item {
        margin-bottom: 0.5rem;
    }

    .info-label {
        font-weight: 600;
        color: #495057;
        margin-right: 0.5rem;
    }

    .info-value {
        color: #212529;
    }
</style>

@code {
    [Parameter]
    public string DeptId { get; set; }
    private Department departmentToEdit = new Department();
    private string errorMessage;
    private int currentDeptId;
    private bool loading = true;

    protected override void OnInitialized()
    {
        try
        {
            if (!int.TryParse(DeptId, out currentDeptId))
            {
                errorMessage = "Invalid Department ID.";
                loading = false;
                return;
            }

            var departments = managerDbAccessor.GetDepartments();
            if (departments == null)
            {
                errorMessage = "Failed to load departments.";
                loading = false;
                return;
            }

            departmentToEdit = departments.FirstOrDefault(d => d.dept_id == currentDeptId);
            if (departmentToEdit == null)
            {
                errorMessage = "Department not found.";
                loading = false;
                return;
            }

            loading = false;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            loading = false;
        }
    }

    private void HandleValidSubmit()
    {
        try
        {
            if (departmentToEdit == null)
            {
                errorMessage = "Department data is not available.";
                return;
            }

            if (string.IsNullOrWhiteSpace(departmentToEdit.dept_name))
            {
                errorMessage = "Department name cannot be empty.";
                return;
            }

            // 检查部门名称是否与其他部门（除了当前部门）重名
            var existingDepartments = managerDbAccessor.GetDepartments();
            if (existingDepartments != null && existingDepartments.Any(d =>
            d.dept_id != currentDeptId &&
            d.dept_name.Equals(departmentToEdit.dept_name, StringComparison.OrdinalIgnoreCase)))
            {
                errorMessage = "A department with this name already exists.";
                return;
            }

            managerDbAccessor.UpdateDepartment(departmentToEdit);
            NavigationManager.NavigateTo("/department");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to update department: {ex.Message}";
        }
    }

    private void GoBack()
    {
        try
        {
            NavigationManager.NavigateTo("/department");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to navigate: {ex.Message}";
        }
    }
}