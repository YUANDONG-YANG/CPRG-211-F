@page "/employeeWage"
@using EmployeeManager.Services
@using EmployeeManager.Models
@inject ManagerDbAccessor managerDbAccessor

<div class="page-container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h3 class="mb-0"><i class="bi bi-file-earmark-bar-graph me-2"></i>Payroll Report</h3>
            <p class="text-muted mb-0">Employee compensation overview</p>
        </div>
        <div class="d-flex">
            <div class="input-group me-2" style="width: 250px;">
                <span class="input-group-text"><i class="bi bi-search"></i></span>
                <input type="text" class="form-control" placeholder="Search employee" @oninput="FilterEmployees" />
            </div>
            <button class="btn btn-outline-primary" @onclick="ExportReport">
                <i class="bi bi-download me-1"></i> Export
            </button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger d-flex align-items-center mb-4" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            <div>@errorMessage</div>
            <button type="button" class="btn-close ms-auto" @onclick="ClearError" aria-label="Close"></button>
        </div>
    }

    <div class="row mb-4">
        <div class="col-md-3">
            <div class="report-stat-card bg-primary text-white">
                <div class="stat-value">@employeeWages.Count</div>
                <div class="stat-label">Total Employees</div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="report-stat-card bg-success text-white">
                <div class="stat-value">@(employeeWages.Select(ew => ew.dept_name).Distinct().Count())</div>
                <div class="stat-label">Departments</div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="report-stat-card bg-info text-white">
                <div class="stat-value">@averageBaseWage.ToString("C0")</div>
                <div class="stat-label">Avg Base Wage</div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="report-stat-card bg-warning text-dark">
                <div class="stat-value">@averageTotalWage.ToString("C0")</div>
                <div class="stat-label">Avg Total Wage</div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body p-0">
            @if (filteredEmployeeWages.Count == 0)
            {
                <div class="text-center py-5">
                    <i class="bi bi-file-earmark-x text-muted" style="font-size: 3rem;"></i>
                    <h5 class="mt-3">No Records Found</h5>
                    <p class="text-muted">No employees match your search criteria</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th style="width: 60px;">ID</th>
                                <th>Employee</th>
                                <th>Department</th>
                                <th>Wage Grade</th>
                                <th class="text-end">Base Wage</th>
                                <th class="text-end">Bonus %</th>
                                <th class="text-end">Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var employeeWage in filteredEmployeeWages)
                            {
                                decimal totalWage = employeeWage.base_wage + (employeeWage.base_wage * employeeWage.bonus_percent / 100);

                                <tr>
                                    <td>@employeeWage.emp_id</td>
                                    <td>
                                        <div class="fw-semibold">@employeeWage.firstname @employeeWage.lastname</div>
                                    </td>
                                    <td>
                                        <span class="badge bg-info text-dark">@employeeWage.dept_name</span>
                                    </td>
                                    <td>
                                        <span class="badge bg-primary">@employeeWage.grade_name</span>
                                    </td>
                                    <td class="text-end">@employeeWage.base_wage.ToString("C")</td>
                                    <td class="text-end">@employeeWage.bonus_percent.ToString("F1")%</td>
                                    <td class="text-end fw-bold">@totalWage.ToString("C")</td>
                                </tr>
                            }
                        </tbody>
                        <tfoot class="table-light">
                            <tr>
                                <td colspan="4" class="fw-bold">Totals & Averages</td>
                                <td class="text-end fw-bold">@totalBaseWage.ToString("C")</td>
                                <td class="text-end fw-bold">@averageBonusPercent.ToString("F1")%</td>
                                <td class="text-end fw-bold">@totalCalculatedWage.ToString("C")</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            }
        </div>
    </div>

    <div class="mt-4">
        <h5><i class="bi bi-pie-chart me-2"></i>Department Distribution</h5>
        <div class="department-chart">
            @foreach (var dept in departmentCounts)
            {
                var percentage = (double)dept.Value / employeeWages.Count * 100;
                <div class="dept-bar-container">
                    <div class="dept-label">@dept.Key</div>
                    <div class="dept-bar-wrapper">
                        <div class="dept-bar" style="width: @percentage%"></div>
                        <div class="dept-count">@dept.Value</div>
                    </div>
                    <div class="dept-percentage">@percentage.ToString("F1")%</div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .page-container {
        padding: 1.5rem 1rem;
    }

    .card {
        border-radius: 8px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
        border: none;
        overflow: hidden;
        margin-bottom: 1.5rem;
    }

    .table thead th {
        font-weight: 600;
        border-top: none;
        border-bottom-width: 1px;
    }

    .table tbody tr:last-child td {
        border-bottom: none;
    }

    .badge {
        font-weight: 500;
        padding: 0.35em 0.65em;
    }

    .report-stat-card {
        border-radius: 8px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
        padding: 1.25rem;
        text-align: center;
        height: 100%;
    }

    .stat-value {
        font-size: 1.8rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .stat-label {
        font-size: 0.9rem;
        opacity: 0.9;
    }

    .department-chart {
        margin-top: 1rem;
    }

    .dept-bar-container {
        display: flex;
        align-items: center;
        margin-bottom: 0.75rem;
    }

    .dept-label {
        width: 150px;
        font-weight: 500;
    }

    .dept-bar-wrapper {
        flex-grow: 1;
        height: 24px;
        background-color: #e9ecef;
        border-radius: 4px;
        position: relative;
        overflow: hidden;
        margin-right: 1rem;
    }

    .dept-bar {
        height: 100%;
        background-color: #0d6efd;
        border-radius: 4px;
    }

    .dept-count {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: #212529;
        font-weight: 500;
        font-size: 0.85rem;
    }

    .dept-percentage {
        width: 60px;
        text-align: right;
        font-weight: 500;
    }
</style>

@code {
    private List<EmployeeWage> employeeWages = new();
    private List<EmployeeWage> filteredEmployeeWages = new();
    private string searchTerm = "";
    private string errorMessage;
    private decimal averageBaseWage = 0;
    private decimal averageTotalWage = 0;
    private decimal totalBaseWage = 0;
    private decimal totalCalculatedWage = 0;
    private decimal averageBonusPercent = 0;
    private Dictionary<string, int> departmentCounts = new();

    protected override void OnInitialized()
    {
        LoadEmployeeWages();
    }

    private void LoadEmployeeWages()
    {
        try
        {
            employeeWages = managerDbAccessor.GetEmployeeWages();
            filteredEmployeeWages = employeeWages;
            CalculateStatistics();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading payroll data: {ex.Message}";
        }
    }

    private void FilterEmployees(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString().ToLower();

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredEmployeeWages = employeeWages;
        }
        else
        {
            filteredEmployeeWages = employeeWages.Where(ew =>
                ew.firstname.ToLower().Contains(searchTerm) ||
                ew.lastname.ToLower().Contains(searchTerm) ||
                ew.dept_name.ToLower().Contains(searchTerm) ||
                ew.grade_name.ToLower().Contains(searchTerm)
            ).ToList();
        }

        CalculateStatistics();
    }

    private void CalculateStatistics()
    {
        if (employeeWages.Count > 0)
        {
            // Calculate statistics for all employees
            averageBaseWage = employeeWages.Average(ew => ew.base_wage);
            averageBonusPercent = employeeWages.Average(ew => ew.bonus_percent);
            averageTotalWage = employeeWages.Average(ew => ew.base_wage + (ew.base_wage * ew.bonus_percent / 100));

            // Calculate totals for filtered employees
            totalBaseWage = filteredEmployeeWages.Sum(ew => ew.base_wage);
            totalCalculatedWage = filteredEmployeeWages.Sum(ew => ew.base_wage + (ew.base_wage * ew.bonus_percent / 100));

            // Calculate department distribution
            departmentCounts = employeeWages
                .GroupBy(ew => ew.dept_name)
                .ToDictionary(g => g.Key, g => g.Count())
                .OrderByDescending(x => x.Value)
                .ToDictionary(x => x.Key, x => x.Value);
        }
    }

    private void ExportReport()
    {
        // This would be implemented to export to CSV/Excel in a real application
        // For now, just show a message
        errorMessage = "Export functionality would be implemented here.";
    }

    private void ClearError()
    {
        errorMessage = null;
    }
}