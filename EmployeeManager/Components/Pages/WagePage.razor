@page "/wages"
@using EmployeeManager.Services
@using EmployeeManager.Models
@inject ManagerDbAccessor managerDbAccessor
@inject NavigationManager NavigationManager

<div class="page-container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h3 class="mb-0"><i class="bi bi-cash-stack me-2"></i>Wage Management</h3>
            <p class="text-muted mb-0">Manage your organization's compensation structure</p>
        </div>
        <button class="btn btn-success" @onclick="CreateNewWage">
            <i class="bi bi-plus-circle me-1"></i> Add Wage Grade
        </button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger d-flex align-items-center mb-4" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            <div>@errorMessage</div>
            <button type="button" class="btn-close ms-auto" @onclick="ClearError" aria-label="Close"></button>
        </div>
    }

    <div class="card">
        <div class="card-body p-0">
            @if (wages.Count == 0)
            {
                <div class="text-center py-5">
                    <i class="bi bi-cash text-muted" style="font-size: 3rem;"></i>
                    <h5 class="mt-3">No Wage Grades Found</h5>
                    <p class="text-muted">Start by adding your first wage grade</p>
                    <button class="btn btn-primary mt-2" @onclick="CreateNewWage">
                        <i class="bi bi-plus-circle me-1"></i> Add Wage Grade
                    </button>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th style="width: 80px;">Grade ID</th>
                                <th>Grade Name</th>
                                <th class="text-end">Base Wage</th>
                                <th class="text-end">Bonus %</th>
                                <th class="text-end">Total Example</th>
                                <th class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var wage in wages)
                            {
                                decimal totalExample = wage.base_wage + (wage.base_wage * wage.bonus_percent / 100);

                                <tr>
                                    <td>@wage.grade_id</td>
                                    <td>
                                        <span class="fw-semibold text-primary">@wage.grade_name</span>
                                    </td>
                                    <td class="text-end">@wage.base_wage.ToString("C")</td>
                                    <td class="text-end">@wage.bonus_percent.ToString("F1")%</td>
                                    <td class="text-end text-success fw-semibold">@totalExample.ToString("C")</td>
                                    <td>
                                        <div class="d-flex justify-content-center">
                                            <button class="btn btn-sm btn-outline-primary me-2" @onclick="@(() => EditWage(wage.grade_id))">
                                                <i class="bi bi-pencil"></i> Edit
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="@(() => ConfirmDelete(wage))">
                                                <i class="bi bi-trash"></i> Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-lg-7">
            <div class="card">
                <div class="card-header bg-light">
                    <h5 class="mb-0">
                        <i class="bi bi-info-circle me-2"></i>Wage Grade Information
                    </h5>
                </div>
                <div class="card-body">
                    <p>Wage grades define the compensation structure of your organization. Each grade includes:</p>
                    <ul>
                        <li><strong>Base Wage</strong>: The standard compensation rate for the grade</li>
                        <li><strong>Bonus Percentage</strong>: Additional compensation calculated as a percentage of base wage</li>
                        <li><strong>Total</strong>: The combined compensation (Base Wage + Bonus)</li>
                    </ul>
                    <p class="mb-0 text-muted small">Note: Changes to wage grades affect all employees assigned to those grades.</p>
                </div>
            </div>
        </div>
        <div class="col-lg-5">
            <div class="card">
                <div class="card-header bg-light">
                    <h5 class="mb-0">
                        <i class="bi bi-bar-chart-line me-2"></i>Wage Structure
                    </h5>
                </div>
                <div class="card-body p-3">
                    @if (wages.Count > 0)
                    {
                        <div class="wage-distribution">
                            @foreach (var wage in wages.OrderBy(w => w.base_wage))
                            {
                                decimal percentage = (decimal)wage.base_wage / wages.Max(w => w.base_wage) * 100;
                                <div class="wage-bar-container mb-2">
                                    <div class="wage-grade-name">@wage.grade_name</div>
                                    <div class="wage-bar-wrapper">
                                        <div class="wage-bar" style="width: @percentage%"></div>
                                    </div>
                                    <div class="wage-amount">@wage.base_wage.ToString("C0")</div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-center text-muted my-3">Add wage grades to see the structure visualization</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@if (showDeleteConfirm)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="() => showDeleteConfirm = false" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the "<strong>@wageToDelete?.grade_name</strong>" wage grade?</p>
                    <p class="text-danger"><small>This action cannot be undone. If employees are assigned to this wage grade, the operation will fail.</small></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showDeleteConfirm = false">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmedDelete">
                        <i class="bi bi-trash me-1"></i> Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .page-container {
        padding: 1.5rem 1rem;
    }

    .card {
        border-radius: 8px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
        border: none;
        overflow: hidden;
        margin-bottom: 1rem;
    }

    .card-header {
        padding: 0.75rem 1.25rem;
        border-bottom: 1px solid rgba(0,0,0,0.08);
    }

    .table thead th {
        font-weight: 600;
        border-top: none;
        border-bottom-width: 1px;
    }

    .table tbody tr:last-child td {
        border-bottom: none;
    }

    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }

        .btn-success:hover {
            background-color: #218838;
            border-color: #1e7e34;
        }

    .btn-outline-primary {
        color: #007bff;
        border-color: #007bff;
    }

        .btn-outline-primary:hover {
            background-color: #007bff;
            color: white;
        }

    .btn-outline-danger {
        color: #dc3545;
        border-color: #dc3545;
    }

        .btn-outline-danger:hover {
            background-color: #dc3545;
            color: white;
        }

    .wage-distribution {
        padding: 0.5rem 0;
    }

    .wage-bar-container {
        display: flex;
        align-items: center;
    }

    .wage-grade-name {
        width: 100px;
        font-weight: 500;
        font-size: 0.85rem;
    }

    .wage-bar-wrapper {
        flex-grow: 1;
        height: 20px;
        background-color: #e9ecef;
        border-radius: 4px;
        margin-right: 1rem;
        overflow: hidden;
    }

    .wage-bar {
        height: 100%;
        background: linear-gradient(to right, #11998e, #38ef7d);
        border-radius: 4px;
    }

    .wage-amount {
        width: 70px;
        text-align: right;
        font-weight: 500;
        font-size: 0.85rem;
    }
</style>

@code {
    private List<Wage> wages = new();
    private string errorMessage;
    private bool showDeleteConfirm = false;
    private Wage wageToDelete;

    protected override void OnInitialized()
    {
        LoadWages();
    }

    private void LoadWages()
    {
        try
        {
            wages = managerDbAccessor.GetWages();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading wages: {ex.Message}";
        }
    }

    private void CreateNewWage()
    {
        NavigationManager.NavigateTo("/addWage");
    }

    private void EditWage(int id)
    {
        NavigationManager.NavigateTo($"/editWage/{id}");
    }

    private void ConfirmDelete(Wage wage)
    {
        wageToDelete = wage;
        showDeleteConfirm = true;
    }

    private void ConfirmedDelete()
    {
        try
        {
            managerDbAccessor.DeleteWage(wageToDelete.grade_id);
            showDeleteConfirm = false;
            LoadWages();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting wage: {ex.Message}";
            showDeleteConfirm = false;
        }
    }

    private void ClearError()
    {
        errorMessage = null;
    }
}