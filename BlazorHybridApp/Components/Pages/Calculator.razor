@page "/calculator"

<div class="container mt-3">
    <h2 class="text-success">Blazor Calculator</h2>

    <div class="mb-3">
        <label>Enter First Number</label>
        <InputText @bind-Value="input1" class="form-control" />
    </div>

    <div class="mb-3">
        <label>Enter Second Number</label>
        <InputText @bind-Value="input2" class="form-control" />
    </div>

    <div class="mb-3">
        <label>Result</label>
        <input type="text" class="form-control" readonly value="@result" />
    </div>

    <div class="mb-3">
        <button class="btn btn-success me-1" @onclick="Add">Add (+)</button>
        <button class="btn btn-primary me-1" @onclick="Subtract">Subtract (-)</button>
        <button class="btn btn-warning me-1" @onclick="Multiply">Multiply (X)</button>
        <button class="btn btn-danger me-1" @onclick="Divide">Divide (/)</button>
        <button class="btn btn-secondary" @onclick="ClearAll">Clear All</button>
    </div>

    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
</div>

@code {
    private String? input1;
    private String? input2;
    private double result;
    private string? errorMessage;


    private void ClearAll()
    {
        input1 = string.Empty;
        input2 = string.Empty;
        result = 0;
        errorMessage = string.Empty;
    }

    public class NonNumericInputException : Exception
    {
        public NonNumericInputException() : base("Invalid input: Please enter numeric values only.")
        {
        }
    }

    private  Task<double> ValidInputAndTransIntoDouble(string? input)
    {
        if (double.TryParse(input, out double number))
        {
            return  Task.FromResult(number);
        }
        else
        {
            throw new NonNumericInputException();
        }
    }

    private async Task Calculate(OperationEnum operation)
    {
        errorMessage = string.Empty;
        try
        {
            double num1 = await ValidInputAndTransIntoDouble(input1);
            double num2 = await ValidInputAndTransIntoDouble(input2);

            if (operation == OperationEnum.Divide && num2 == 0)
            {
                errorMessage = "Division by zero is not allowed.";
                return;
            }

            result = await Calculate(num1, num2, operation);
        }
        catch (NonNumericInputException ex)
        {
            errorMessage = ex.Message;
        }
        catch (DivideByZeroException ex)
        {
            errorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred: " + ex.Message;
        }
    }

    private async Task Add() => await Calculate(OperationEnum.Add);
    private async Task Subtract() => await Calculate(OperationEnum.Subtract);
    private async Task Multiply() => await Calculate(OperationEnum.Multiply);
    private async Task Divide() => await Calculate(OperationEnum.Divide);

    private enum OperationEnum
    {
        Add,

        Subtract,

        Multiply,

        Divide
    }
 
 
        private Task<double> Calculate(double number1, double number2, OperationEnum operation)
        {
            switch (operation)
            {
                case OperationEnum.Add:
                    return Task.FromResult(number1 + number2);
                case OperationEnum.Subtract:
                    return Task.FromResult(number1 - number2);
                case OperationEnum.Multiply:
                    return Task.FromResult(number1 * number2);
                case OperationEnum.Divide:
                    if (number2 == 0)
                    {
                        throw new DivideByZeroException("Division by zero is not allowed.");
                    }
                    return Task.FromResult(number1 / number2);
                default:
                    throw new ArgumentException("Invalid operation.");
            }
        }

}
