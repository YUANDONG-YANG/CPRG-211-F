@page "/todo"
@using System.Globalization;
@using System.Text.RegularExpressions

<h3>Todo List</h3>

<div class="input-group mb-3" style="max-width: 400px;">
    <input @bind="newItem" @bind:event="oninput"
           class="form-control"
           placeholder="Enter a new todo item" />
    <button class="btn btn-primary" @onclick="AddItemAsync">Add</button>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<h4>Todo</h4>
@if (groupedItems != null && groupedItems.ContainsKey(false) && groupedItems[false].Any())
{
    @foreach (var item in groupedItems[false])
    {
        <div class="mb-2">
            <input type="checkbox"
                   class="form-check-input"
                   @onclick="() => OnCheckboxChanged(item, true)" />
            <span class="ms-2">@item.Title</span>
            <button class="btn btn-danger btn-sm ms-2" @onclick="() => DeleteItemAsync(item.Id)">Delete</button>
        </div>
    }
}
else
{
    <p>No todo items.</p>
}

<h4>Done</h4>
@if (groupedItems != null && groupedItems.ContainsKey(true) && groupedItems[true].Any())
{
    @foreach (var item in groupedItems[true])
    {
        <div class="mb-2">
            <input type="checkbox"
                   class="form-check-input"
                   checked
                   @onclick="() => OnCheckboxChanged(item, false)" />
            <span class="ms-2">@item.Title</span>
            <button class="btn btn-danger btn-sm ms-2" @onclick="() => DeleteItemAsync(item.Id)">Delete</button>
        </div>
    }
}
else
{
    <p>No done items.</p>
}

@code {
    private string newItem = string.Empty;

    private string errorMessage = string.Empty;

    private Dictionary<bool, List<Item>> groupedItems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsAsync();
    }

    private async Task LoadItemsAsync()
    {
        try
        {
            var result = await GetAllItems();
            if (result == null || !result.Any() ||
               ((!result.ContainsKey(false) || !result[false].Any()) &&
                 (!result.ContainsKey(true) || !result[true].Any())))
            {
                errorMessage = string.Empty;
            }
            groupedItems = result;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading items: {ex.Message}";
        }
    }

    private async Task AddItemAsync()
    {
        try
        {
            errorMessage = string.Empty;
            ValidateInput(newItem);
            bool added = await AddItem(newItem);
            if (!added)
            {
                errorMessage = "Failed to add new item.";
            }
            else
            {
                newItem = string.Empty;
                await LoadItemsAsync();
            }
        }
        catch (IllegalCharactersException ex)
        {
            errorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
        }
    }

    private async Task DeleteItemAsync(int id)
    {
        try
        {
            errorMessage = string.Empty;
            bool deleted = await DeleteItem(id);
            if (!deleted)
            {
                errorMessage = "Failed to delete item.";
            }
            else
            {
                await LoadItemsAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting item: {ex.Message}";
        }
    }

    private void ValidateInput(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
        {
            throw new IllegalCharactersException("Please enter a non-empty todo item.");
        }
        if (Regex.IsMatch(input, "[@#$%]"))
        {
            throw new IllegalCharactersException("Special characters (@, #, $, %) are not allowed.");
        }
    }

    private async Task OnCheckboxChanged(Item item, bool newIsDone)
    {
        try
        {
            errorMessage = string.Empty;
            bool success = await UpdateItemIsDone(item.Id, newIsDone);
            if (!success)
            {
                errorMessage = "Failed to update item status.";
            }
            else
            {
                await LoadItemsAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating item: {ex.Message}";
        }
    }

    public class IllegalCharactersException : Exception
    {
        public IllegalCharactersException(string message) : base(message) { }
    }



        private int nextId = 1;

        public const string ITEMS_FILE = "items.csv";

        public class DuplicateItemException : System.Exception
        {
            public DuplicateItemException(string message)
                : base(message)
            {
            }
        }
        public Task<Dictionary<bool, List<Item>>> GetAllItems()
        {
            List<Item> items = LoadItemsFromCsv();

            var groupedItems = items
                .GroupBy(item => item.IsDone)
                .ToDictionary(group => group.Key, group => group.ToList());

            return Task.FromResult(groupedItems);
        }

        public Item GetItemById(int id)
        {
            List<Item> items = LoadItemsFromCsv();
            return items.FirstOrDefault(x => x.Id == id);
        }

        public Task<Boolean> AddItem(string title)
        {
            List<Item> items = LoadItemsFromCsv();
            if (items.Any(i => i.Title.Equals(title, StringComparison.OrdinalIgnoreCase)))
            {
                throw new DuplicateItemException($"An item with title '{title}' already exists.");
            }
            items.Add(new Item(nextId++, title, false));
            Boolean isSave = SaveItemsIntoCsv(items);
            return Task.FromResult(isSave);
        }

        public Task<bool> DeleteItem(int id)
        {
            List<Item> items = LoadItemsFromCsv();
            var item = items.FirstOrDefault(x => x.Id == id);
            if (item != null)
            {
                items.Remove(item);
                return Task.FromResult(SaveItemsIntoCsv(items));
            }
            return Task.FromResult(false);
        }

        public Task<bool> UpdateItemIsDone(int id, bool isDone)
        {
            List<Item> items = LoadItemsFromCsv();
            var item = items.FirstOrDefault(x => x.Id == id);
            if (item != null)
            {
                item.IsDone = isDone;
                return Task.FromResult(SaveItemsIntoCsv(items));
            }
            return Task.FromResult(false);
        }

        public List<Item> LoadItemsFromCsv()
        {
            var items = new List<Item>();
            var filePath = Path.Combine(ITEMS_FILE);
            if (!File.Exists(filePath))
            {
                return items;
            }
            using var stream = FileSystem.OpenAppPackageFileAsync(ITEMS_FILE).GetAwaiter().GetResult();
            using var reader = new StreamReader(stream);

            string? line;
            while ((line = reader.ReadLine()) != null)
            {
                if (string.IsNullOrWhiteSpace(line))
                    continue;

                var columns = line.Split(',')
                                  .Select(c => c.Trim())
                                  .ToArray();

                if (columns.Length < 3)
                    continue;

                if (!int.TryParse(columns[0], out var id))
                {
                    continue;
                }

                var title = columns[1];

                bool isDone = bool.TryParse(columns[2], out var parsedBool) ? parsedBool : false;

                try
                {
                    var item = new Item(id, title, isDone);
                    items.Add(item);
                }
                catch (System.Exception ex)
                {
                    Console.WriteLine("loading Items.csv error: {Message}", ex.Message);
                }

            }
            return items;
        }
        public bool SaveItemsIntoCsv(List<Item> items)
        {
            try
            {
                string filePath = ITEMS_FILE;

                string? directory = Path.GetDirectoryName(filePath);

                if (!string.IsNullOrEmpty(directory) && !Directory.Exists(directory))
                {
                    Directory.CreateDirectory(directory);
                    Console.WriteLine("Created directory: {Directory}", directory);
                }

                if (File.Exists(filePath))
                {
                    File.Delete(filePath);
                    Console.WriteLine("deleted firstly：{FilePath}", filePath);
                }

                using (var writer = new StreamWriter(filePath, false))
                {
                    writer.WriteLine("Id,Title,IsDone");

                    foreach (var item in items)
                    {
                        string line = string.Format(CultureInfo.InvariantCulture, "{0},{1},{2}",
                                                    item.Id,
                                                    item.Title,
                                                    item.IsDone);
                        writer.WriteLine(line);
                    }
                }

                Console.WriteLine("save items.csv successfully：{FilePath}", filePath);
                return true;
            }
            catch (System.Exception ex)
            {
                Console.WriteLine("save items.csv file error !");
                return false;
            }
        }

    public class Item
    {
        public int Id { get; set; }

        public string Title { get; set; }

        public bool IsDone { get; set; }
        public static Item? Null { get; internal set; }

        public Item(int id, string title, bool isDone)
        {
            Id = id;
            Title = title;
            IsDone = isDone;
        }

    }

}
